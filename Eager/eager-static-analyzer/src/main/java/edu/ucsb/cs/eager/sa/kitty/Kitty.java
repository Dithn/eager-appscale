/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package edu.ucsb.cs.eager.sa.kitty;

import edu.ucsb.cs.eager.sa.cerebro.CFGAnalyzer;
import edu.ucsb.cs.eager.sa.cerebro.Cerebro;
import edu.ucsb.cs.eager.sa.kitty.qbets.QBETSTracingPredictor;
import edu.ucsb.cs.eager.sa.kitty.qbets.SimpleQBETSPredictor;
import edu.ucsb.cs.eager.sa.kitty.qbets.TraceAnalysisResult;
import edu.ucsb.cs.eager.sa.kitty.simulation.SimulationBasedPredictor;
import org.apache.commons.cli.*;
import soot.SootMethod;

import java.io.*;
import java.util.*;

/**
 * Kitty analyzes trace files generated by Cerebro and makes
 * predictions regarding the timing of the function calls. It picks
 * the worst-case paths from Cerebro traces and predicts their
 * execution time. Kitty is named after Kitty Pryde, for her ability of
 * phasing through the currents of time.
 */
public class Kitty {

    public static void main(String[] args) throws IOException {
        Options options = getOptions();
        CommandLine cmd = PredictionUtils.parseCommandLineArgs(options, args, "Kitty");
        PredictionConfig config = getPredictionConfig(cmd);
        if (config != null) {
            Kitty k = new Kitty();
            Collection<MethodInfo> methods = k.getMethods(config);
            k.run(config, methods);
        }
    }

    public static PredictionConfig getPredictionConfig(CommandLine cmd) {
        PredictionConfig config = new PredictionConfig();
        config.setTraceFile(cmd.getOptionValue("i"));
        config.setCerebroClasspath(cmd.getOptionValue("ccp"));
        config.setClazz(cmd.getOptionValue("c"));
        config.setLoadNecessaryClasses(!cmd.hasOption("dnc"));
        config.setWholeProgramMode(cmd.hasOption("wp"));

        String methods = cmd.getOptionValue("m");
        if (methods != null) {
            config.setMethods(methods.split(","));
        }

        config.setBenchmarkDataDir(cmd.getOptionValue("b"));
        String sn = cmd.getOptionValue("sn");
        if (sn != null) {
            config.setSimulations(Integer.parseInt(sn));
        }
        config.setBenchmarkDataSvc(cmd.getOptionValue("s"));
        String q = cmd.getOptionValue("q");
        if (q != null) {
            config.setQuantile(Double.parseDouble(q));
        }
        String c = cmd.getOptionValue("cn");
        if (c != null) {
            config.setConfidence(Double.parseDouble(c));
        }
        config.setAggregateTimeSeries(cmd.hasOption("a"));
        config.setSimplePredictor(cmd.hasOption("sp"));

        String start = cmd.getOptionValue("st");
        if (start != null) {
            config.setStart(Long.parseLong(start));
        }
        String end = cmd.getOptionValue("en");
        if (end != null) {
            config.setEnd(Long.parseLong(end));
        }

        String maxEntities = cmd.getOptionValue("me");
        if (maxEntities != null) {
            config.setMaxEntities(Integer.parseInt(maxEntities));
        }

        try {
            config.validate();
        } catch (Exception e) {
            System.err.println(e.getMessage());
            return null;
        }
        return config;
    }

    public static Options getOptions() {
        Options options = new Options();
        PredictionUtils.addOption(options, "i", "input-file", true,
                "Path to the Cerebro trace file");

        PredictionUtils.addOption(options, "ccp", "cerebro-classpath", true,
                "Cerebro classpath");
        PredictionUtils.addOption(options, "c", "class", true,
                "Class to be used as the starting point");
        PredictionUtils.addOption(options, "dnc", "disable-nec-classes", false,
                "Disable loading of necessary classes");
        PredictionUtils.addOption(options, "wp", "whole-program", false,
                "Enable whole program mode");
        PredictionUtils.addOption(options, "m", "methods", true,
                "Methods that should be analyzed");

        PredictionUtils.addOption(options, "b", "benchmark-dir", true,
                "Path to the directory containing seed benchmark results");
        PredictionUtils.addOption(options, "sn", "simulations", true,
                "Number of times to simulate each path (default 100)");

        PredictionUtils.addOption(options, "s", "benchmark-svc", true,
                "URL of the benchmark data service");
        PredictionUtils.addOption(options, "q", "quantile", true,
                "Execution time quantile that should be predicted");
        PredictionUtils.addOption(options, "cn", "confidence", true,
                "Upper confidence of the predicted execution time quantile");
        PredictionUtils.addOption(options, "a", "aggregate-ts", false,
                "Aggregate multiple time series into a single time series");
        PredictionUtils.addOption(options, "sp", "simple", false,
                "Use the simple QBETS predictor");

        PredictionUtils.addOption(options, "st", "start", true,
                "Start timestamp for fetching time series data");
        PredictionUtils.addOption(options, "en", "end", true,
                "End timestamp for fetching time series data");

        PredictionUtils.addOption(options, "me", "max-entities", true,
                "Maximum entities that may exist in the datastore");
        return options;
    }

    private Map<MethodInfo,TraceAnalysisResult[]> summary;

    public Collection<MethodInfo> getMethods(PredictionConfig config) throws IOException {
        if (config.getTraceFile() != null) {
            TraceLogParser parser = new TraceLogParser();
            parser.parseFile(config.getTraceFile());
            return parser.getMethods();
        } else {
            return getMethodsFromCerebro(config);
        }
    }

    public void run(PredictionConfig config, Collection<MethodInfo> methods) throws IOException {
        if (config.getBenchmarkDataDir() != null) {
            SimulationBasedPredictor.predict(config, methods);
        } else if (config.getBenchmarkDataSvc() != null) {
            if (config.isSimplePredictor()) {
                SimpleQBETSPredictor.predict(config, methods);
            } else {
                summary = QBETSTracingPredictor.predict(config, methods);
            }
        } else {
            throw new IllegalArgumentException();
        }
    }

    public Map<MethodInfo, TraceAnalysisResult[]> getSummary() {
        return summary;
    }

    private Collection<MethodInfo> getMethodsFromCerebro(PredictionConfig config) {
        Cerebro cerebro = new Cerebro(config.getCerebroClasspath(), config.getClazz());
        cerebro.setLoadNecessaryClasses(config.isLoadNecessaryClasses());
        cerebro.setWholeProgramMode(config.isWholeProgramMode());
        try {
            Map<SootMethod,CFGAnalyzer> results = cerebro.analyze();
            Set<MethodInfo> methods = new TreeSet<MethodInfo>(new MethodInfo.MethodInfoComparator());
            for (Map.Entry<SootMethod,CFGAnalyzer> entry : results.entrySet()) {
                MethodInfo mi = new MethodInfo(entry.getKey().getName());
                for (List<SootMethod> path : entry.getValue().getPaths()) {
                    Path callPath = new Path();
                    for (SootMethod sm : path) {
                        APICall call = new APICall(sm.getDeclaringClass().getName() + "#" +
                                sm.getName() + "()");
                        if (call.isLoop()) {
                            // Use the same entity count limit for all loops for now.
                            call.setIterations(config.getMaxEntities());
                        }
                        callPath.add(call);
                    }
                    mi.addPath(callPath);
                }
                methods.add(mi);
            }
            return methods;
        } finally {
            cerebro.cleanup();
        }
    }

}
