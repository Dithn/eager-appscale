/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *   * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package edu.ucsb.cs.eager.sa.kitty;

import org.apache.commons.cli.*;

import java.io.*;

/**
 * Kitty (named after Kitty Pryde), analyzes trace files generated by Cerebro
 * and makes predictions regarding the timing of the function calls. It picks
 * the worst-case paths from Cerebro traces and makes predictions on them.
 */
public class Kitty {

    public static void main(String[] args) {
        Options options = new Options();
        options.addOption("i", "input-file", true, "Path to the Cerebro trace file");

        CommandLine cmd;
        try {
            CommandLineParser parser = new BasicParser();
            cmd = parser.parse( options, args);
        } catch (ParseException e) {
            System.err.println("Error: " + e.getMessage() + "\n");
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("Kitty", options);
            return;
        }

        String inputFileName = cmd.getOptionValue("i");
        if (inputFileName == null) {
            System.err.println("input file path is required");
            return;
        }

        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(inputFileName));
        } catch (FileNotFoundException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        }

        String line;
        TraceLogParser parser = new TraceLogParser();
        try {
            while ((line = reader.readLine()) != null) {
                parser.parse(line);
            }
        } catch (IOException e) {
            System.err.println(e.getMessage());
            e.printStackTrace();
            return;
        } finally {
            try {
                reader.close();
            } catch (IOException ignored) {
            }
        }

        for (MethodInfo m : parser.getMethods()) {
            System.out.println(m);
        }
    }
}
